// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
import { {{controller.name}} } from '.{{controller.modulePath}}';

import { getValidatedArgs } from '.{{modelsFileName}}';
{{#if iocModule}}
import { iocContainer } from '{{iocModule}}';
import { IocContainer, IocContainerFactory } from '@tsoa/runtime';
{{/if}}

{{#if iocModule}}
const container: IocContainer = typeof iocContainer === 'function' ? (iocContainer as IocContainerFactory)(request) : iocContainer;

const controller: any = await container.get<{{../name}}>({{controller.name}});
if (typeof controller['setStatus'] === 'function') {
controller.setStatus(undefined);
}
{{else}}
const controller = new {{controller.name}}();
{{/if}}

/**
*   Handler for:
*   {{action.method}} {{action.fullPath}}
*
*/

export async function handler(event, context) {
   
    const args = {
        {{#each action.parameters}}
            {{@key}}: {{{json this}}},
        {{/each}}
    };

    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa

    let validatedArgs: any[] = [];
    try {
        validatedArgs = getValidatedArgs(args, event);
    } catch(err) {
        const error = err as any;
        return {
            statusCode: error.status,
            body: JSON.stringify(error)
        };
    }
    try {
        // eslint-disable-next-line prefer-spread
        const result = await controller.{{action.name}}.apply(controller, validatedArgs as any);
        return {
            statusCode: {{action.successStatus}},
            body: JSON.stringify(result)
        };
    } catch (err) {
        return {
            statusCode: 500,
            body: JSON.stringify(err)
        };
    }
}
